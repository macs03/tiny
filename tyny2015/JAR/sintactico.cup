package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal MT;
terminal MEQT;
terminal LEQT;
terminal DIF;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal FOR;
terminal INT;
terminal BOOLEAN;
terminal COMA;
terminal RETURN;
terminal BEGIN;
terminal VOID;
terminal LCORCHETE;
terminal RCORCHETE;



/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase for_stmt;
non terminal NodoBase declarar_stmt;
non terminal NodoBase parametro_seq;
non terminal NodoBase parametro;
non terminal NodoBase llamar_functionR;
non terminal NodoBase llamar_function;
non terminal NodoBase vector;
non terminal NodoBase function_seq;
non terminal NodoBase cp;
non terminal NodoBase function;
non terminal NodoBase tipo;
non terminal NodoBase bloque;
non terminal NodoBase return;
non terminal NodoBase operacion;
non terminal NodoBase exp_p;
non terminal NodoBase procedure;
non terminal NodoBase fun_pro;
non terminal NodoBase asig;
non terminal NodoBase paso;


/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* REGLAS GRAMATICALES */
program     ::= function_seq cp {: if (modoDepuracion)
                                    System.out.println("\t regla: program ::= funtion_seq cp ");    
                                :}
               | error {: if(modoDepuracion){ System.out.println("\t regla programa invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
		;
function_seq ::= function_seq fun_pro | fun_pro 

                 
                ;

fun_pro ::= function | procedure
                ;

function ::= tipo ID LPAREN parametro_seq RPAREN bloque return END
             | error {: if(modoDepuracion){ System.out.println("\t regla function invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
                ;

procedure ::= VOID ID LPAREN parametro_seq RPAREN cp

            | error {: if(modoDepuracion){ System.out.println("\t regla procedure invalida"); 
			// System.out.println("Ocurrio error en cup # 0004");
		           RESULT=null;
                           System.exit(0);
                         }
	            :}	
                ;

cp ::= bloque END
        | error {: if(modoDepuracion){ System.out.println("\t regla cp invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
        ;

bloque ::= BEGIN stmt_seq 
            | error {: if(modoDepuracion){ System.out.println("\t regla bloque invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
        ;

stmt_seq    ::= stmt_seq:ini stmt:sent	
            | stmt:sent	
		;

stmt        ::= if_stmt:sif	
            | repeat_stmt:srep	
            | assign_stmt:sasi	
            | read_stmt:slec	
            | write_stmt:sesc	
            | for_stmt 

            | declarar_stmt

            | llamar_function
            
            | error {: if(modoDepuracion){ System.out.println("\t regla stmt que no consigue ninguna"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
                                System.exit(0);
                         }
	            :}	
            ;

if_stmt     ::= IF operacion:ex THEN stmt_seq:pthen END	
		| IF operacion:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	
                
                | error {: if(modoDepuracion){ System.out.println("\t regla if_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
		;


repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL operacion:prueba

                | error {: if(modoDepuracion){ System.out.println("\t regla repeat_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	

		;

assign_stmt ::= ID:variable ASSIGN operacion:ex SEMI
                 | vector ASSIGN exp SEMI
                 
                 | error {: if(modoDepuracion){ System.out.println("\t regla assign_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
                 
		;

read_stmt   ::= READ ID:variable SEMI

                | error {: if(modoDepuracion){ System.out.println("\t regla read_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
		;

write_stmt  ::= WRITE operacion:ex SEMI

            | error {: if(modoDepuracion){ System.out.println("\t regla write_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
		;

exp         ::= simple_exp:exI LT simple_exp:exD	
		| simple_exp:exI EQ simple_exp:exD	
		| simple_exp:ex	
                | simple_exp MT simple_exp

                | simple_exp MEQT simple_exp

                | simple_exp LEQT simple_exp
		
                | simple_exp DIF simple_exp
                
                | error {: if(modoDepuracion){ System.out.println("\t regla exp invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
                
               
                ;

simple_exp  ::= simple_exp:exI PLUS term:exD	
		| simple_exp:exI MINUS term:exD	
		| term:ex

                | error {: if(modoDepuracion){ System.out.println("\t regla simple_exp invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
		;

term        ::= term:exI TIMES factor:exD	
		| term:exI OVER factor:exD	
		| factor:ex
                | error {: if(modoDepuracion){ System.out.println("\t regla term invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
		;

factor      ::= LPAREN exp:ex RPAREN	
		| NUM:valor	
		| ID:variable	
                | vector
                | llamar_functionR
                |

		| error    {:	if(modoDepuracion) {System.out.println("\t regla factor que no consigue ninguna"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
                                System.exit(0);
                               }
			   :}
		;
for_stmt    ::= FOR LPAREN asig SEMI operacion SEMI paso RPAREN bloque END
                
                | error {: if(modoDepuracion){ System.out.println("\t regla for_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	

                ;

asig ::= ID ASSIGN NUM
            | error {: if(modoDepuracion){ System.out.println("\t regla for_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	

                ;

paso ::= ID ASSIGN simple_exp

                    | error {: if(modoDepuracion){ System.out.println("\t regla for_stmt invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
                ;


declarar_stmt ::= tipo declarar_stmt:ds | ID COMA declarar_stmt | ID SEMI | vector SEMI 
                                
                                | error {:if(modoDepuracion){ System.out.println("\t regla declarar_stmt invalida"); 
                                          System.out.println("Ocurrio error en cup # 0004");
                                          RESULT=null;
                                          System.exit(0);
                                        }
				:}
                ;

llamar_functionR ::= ID LPAREN parametro_seq RPAREN 
                   | error {: if(modoDepuracion){ System.out.println("\t regla llamar_functionR invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	

                ;

llamar_function ::= ID LPAREN parametro_seq RPAREN SEMI 
                
                | error {: if(modoDepuracion){ System.out.println("\t regla llamar_function invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	

                ;

parametro_seq ::= parametro_seq COMA parametro | parametro
                | error {: if(modoDepuracion){ System.out.println("\t regla declarar function"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	

                ;

parametro ::= tipo factor | factor 
               | error {: if(modoDepuracion){ System.out.println("\t regla parametro invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
                ;

vector ::= ID LCORCHETE operacion RCORCHETE

            | error {: if(modoDepuracion){ System.out.println("\t regla vector invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
                ;


operacion ::= exp_p OR operacion | exp_p
                | error {: if(modoDepuracion){ System.out.println("\t regla operacion invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	

                ;

exp_p ::= exp AND exp_p | exp
                        | error {: if(modoDepuracion){ System.out.println("\t regla exp_p invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
               ;

return ::= RETURN operacion SEMI

            | error {: if(modoDepuracion){ System.out.println("\t regla return invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
    
            ;

tipo ::= INT | BOOLEAN
             | error {: if(modoDepuracion){ System.out.println("\t regla tipo invalida"); 
			       // System.out.println("Ocurrio error en cup # 0004");
		                RESULT=null;
                                System.exit(0);
                         }
	            :}	
            ;