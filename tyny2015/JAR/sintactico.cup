package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal PCOMA;
terminal INT;
terminal BOOLEAN;
terminal VOID;
terminal RETORNAR;
terminal BEGIN;
terminal FOR;
terminal AND;
terminal OR;
terminal LCORCHETE;
terminal RCORCHETE;
terminal MT;
terminal LEQT;
terminal MEQT;
terminal DIF;
terminal COMA;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase for_stmt;
non terminal NodoBase function_stmt;
non terminal NodoBase procedure_stmt;
non terminal NodoBase vector;
non terminal NodoBase parametro_seq;
non terminal NodoBase parametro;
non terminal NodoBase declarar_stmt;
non terminal NodoBase llamarfunction_stmt;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;

/* Falta precedencia de los operadores logicos */

/* REGLAS GRAMATICALES */
program     ::= stmt_seq:s	{: if(modoDepuracion) System.out.println("\t regla 1"); 
					ast = s;
					:}
		;

stmt_seq    ::= stmt_seq:ini stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(modoDepuracion) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= if_stmt:sif	{: if(modoDepuracion) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(modoDepuracion) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(modoDepuracion) System.out.println("\t regla 3d"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(modoDepuracion) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
            | for_stmt {: :}

            | declarar_stmt {: :}

            | function_stmt {: :}

            | llamarfunction_stmt {: :}

            | procedure_stmt {: :}
            
            | vector {: :}
                           
            | error	{: if(modoDepuracion) System.out.println("\t regla 3f"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

for_stmt    ::= FOR LPAREN assign_stmt:as PCOMA exp:ex PCOMA assign_stmt:as1 RPAREN stmt_seq:stq END
                {: :}
                ;

declarar_stmt ::= INT declarar_stmt:dst {: :}
                  | BOOLEAN {: :}
                  | ID COMA declarar_stmt:dst1 {: :}
                  | ID PCOMA {: :}
                  | vector:vec PCOMA {: :}
                  ;

function_stmt ::= INT ID LPAREN exp:ex RPAREN BEGIN stmt_seq:stq RETORNAR exp:ex1 END {::}
                  | BOOLEAN ID LPAREN exp:ex RPAREN BEGIN stmt_seq:stq RETORNAR exp:ex1 END {::}
                  ;

llamarfunction_stmt ::= ID LPAREN parametro_seq:ps RPAREN PCOMA {::}
                  ;

procedure_stmt ::= VOID ID LPAREN exp:ex RPAREN BEGIN stmt_seq:stq END {::}            
                  ;


vector ::= ID LCORCHETE NUM RCORCHETE {::}
            ;

if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(modoDepuracion) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(modoDepuracion) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(modoDepuracion) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

assign_stmt ::= ID:variable 	{: if(modoDepuracion) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
/*OJO pelao*/
			ASSIGN exp:ex PCOMA {: if(modoDepuracion) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}

		;

read_stmt   ::= READ ID:variable PCOMA{: if(modoDepuracion) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex PCOMA{: if(modoDepuracion) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: if(modoDepuracion) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:ex	{: if(modoDepuracion) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:}
                | simple_exp:ex2 MT simple_exp:exD	{: :}
		
                | simple_exp:ex3 MEQT simple_exp:exD	{: :}

                | simple_exp:ex4 LEQT simple_exp:exD	{: :}

                | simple_exp:ex5 DIF simple_exp:exD	{: :}

                | simple_exp:ex6 AND simple_exp:exD	{: :}

                | simple_exp:ex7 OR simple_exp:exD	{: :}

                | simple_exp:exI MT simple_exp:exD	{: :}

                | parametro_seq:pas {::}

                | vector:vec {::}
               
               

                
;

/*Ojo con el null, es mejor preguntar*/

parametro_seq ::= parametro_seq:pas COMA parametro:pa {::}
                  | parametro:pa1 {::}
                  ;
parametro ::= INT simple_exp:se {::}
              | BOOLEAN simple_exp:se1 {::}
		   |factor:fac {::} 
              ;
simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(modoDepuracion) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(modoDepuracion) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(modoDepuracion) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(modoDepuracion) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(modoDepuracion) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(modoDepuracion) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(valor);					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(modoDepuracion) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		
		| llamarfunction_stmt:fs{::}


		|error	{: if(modoDepuracion) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;
